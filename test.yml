name: Deploy Helm Chart to GKE

on:
  push:
    paths:
      - 'charts/my-app/**' # my-appチャートに変更があった場合のみ実行
    branches:
      - aaa-001             # aaa-001ブランチへのpushでトリガー

env:
  GCP_PROJECT_ID: your-gcp-project-id
  GKE_CLUSTER_NAME: your-cluster-name
  GKE_CLUSTER_REGION: your-cluster-region
  HELM_RELEASE_NAME: my-app
  HELM_CHART_PATH: ./charts/my-app
  KUBERNETES_NAMESPACE: default

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read            # コードへの読み取りアクセス
      id-token: write           # Workload Identity Federation用のIDトークン発行を許可

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # リポジトリのコードをチェックアウト（取得）

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        # Workload Identity Federation による GCP 認証を実行

      - name: Set up kubectl
        uses: google-github-actions/setup-gcloud@v1
        # kubectl/gcloud CLI のセットアップ

      - name: Authenticate kubectl to GKE
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER_NAME" \
            --region "$GKE_CLUSTER_REGION" \
            --project "$GCP_PROJECT_ID"
        # GKEクラスタの認証情報を取得し、kubectlが使えるようにする

      - name: Set up Helm
        uses: azure/setup-helm@v3
        # Helm CLI のインストール

      # 5. リリースが存在するか確認し、削除（強制同期）
      - name: 🧹 Uninstall existing release (if exists)
        run: |
          if helm status $RELEASE_NAME -n $NAMESPACE > /dev/null 2>&1; then
            echo "Existing release found. Uninstalling..."
            helm uninstall $RELEASE_NAME -n $NAMESPACE
          else
            echo "No existing release found. Skipping uninstall."
          fi

      - name: Helm lint
        run: |
          helm lint "$HELM_CHART_PATH"
        # Helm チャートの構文や構成をチェックしてエラーがないか検証

      - name: Helm template output
        run: |
          helm template "$HELM_RELEASE_NAME" "$HELM_CHART_PATH" \
            --namespace "$KUBERNETES_NAMESPACE"
        # Helm チャートから最終的に生成される Kubernetes マニフェストを確認用に出力

      - name: Helm dry-run (simulate deployment)
        run: |
          helm upgrade --install "$HELM_RELEASE_NAME" "$HELM_CHART_PATH" \
            --namespace "$KUBERNETES_NAMESPACE" \
            --create-namespace \
            --dry-run \
            --debug
        # Helm デプロイを本番環境に反映せずシミュレーション（dry-run）

      - name: Deploy with Helm
        run: |
          helm upgrade --install "$HELM_RELEASE_NAME" "$HELM_CHART_PATH" \
            --namespace "$KUBERNETES_NAMESPACE" \
            --create-namespace \
            --wait
        # Helm を使って GKE に実際にデプロイ（リリースがなければ install、あれば upgrade）
